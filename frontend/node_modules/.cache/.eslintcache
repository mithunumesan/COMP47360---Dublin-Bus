[{"/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/index.js":"1","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/App.js":"2","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/pages/Leapcard.js":"3","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/pages/Leapcardlogin.js":"4","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/pages/Journeyplanning.js":"5","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/components/layout/MainNavigation.js":"6","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/components/layout/WeatherCard.js":"7","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/components/layout/LoginForm.js":"8"},{"size":470,"mtime":1657485362604,"results":"9","hashOfConfig":"10"},{"size":914,"mtime":1657657538292,"results":"11","hashOfConfig":"10"},{"size":6241,"mtime":1657485362604,"results":"12","hashOfConfig":"10"},{"size":705,"mtime":1657485362604,"results":"13","hashOfConfig":"10"},{"size":8037,"mtime":1657750414715,"results":"14","hashOfConfig":"10"},{"size":1776,"mtime":1657750137809,"results":"15","hashOfConfig":"10"},{"size":1012,"mtime":1657705531336,"results":"16","hashOfConfig":"10"},{"size":661,"mtime":1657657538292,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"17ia6eq",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/index.js",[],[],[],"/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/App.js",[],[],"/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/pages/Leapcard.js",[],[],"/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/pages/Leapcardlogin.js",[],[],"/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/pages/Journeyplanning.js",["45"],["46","47","48","49","50","51","52"],"import { useJsApiLoader, Autocomplete,DirectionsRenderer,GoogleMap,Marker } from '@react-google-maps/api';\nimport { useState,useRef } from 'react';\n\nconst containerStyle = {\n    width: '100%',\n    height: '100%'\n  };\n  \n  const center = {\n    lat: 53.3463,\n    lng: -6.2631\n  };\n\n  const defaultBounds = {\n    north: center.lat + 0.1,\n    south: center.lat - 0.1,\n    east: center.lng + 0.1,\n    west: center.lng - 0.1,\n  };\n\n\nfunction JourneyPlanning() {\n\n    //react google map api using is refereneced from https://www.youtube.com/watch?v=iP3DnhCUIsE&list=RDCMUCr0y1P0-zH2o3cFJyBSfAKg&start_radio=1&rv=iP3DnhCUIsE&t=1614\n    const [directionsResponse, setDirectionsResponse] = useState({})\n    //save markers\n    const [markers,setMarkers]=useState({})\n   \n    /**@type React.MutableRefObject<HTMLInputElement> */\n    const startRef = useRef()\n    /**@type React.MutableRefObject<HTMLInputElement> */\n    const destinationRef = useRef()\n\n    //save select option value\n    const [selected, setSelected] = useState();\n    //the event for time select \n    const changeSelected = event => {\n        setSelected(event.target.value);\n        if (selected !== \"now\") {\n            setBooleanValue(true);\n        } else {\n            setBooleanValue(false);\n        }\n    }\n\n    const [booleanValue,setBooleanValue] = useState(false);\n    \n    const [dateTime, setDateTime] = useState(null);\n\n    const handleChange = event => {\n        setDateTime(event.target.value);\n    }\n\n    const [map, setMap] = useState(/** @type google.maps.Map */ (null))\n    const { isLoaded } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyCdf-x6SluXsWzP9qpwxVGBY08pm_3TAQU\",\n    libraries:['places']\n  })\n      if(!isLoaded) {\n        return \"map is not loaded\";\n    }\n\n    async function caculateRoute(){\n        if(startRef.current.value === '' || destinationRef.current.value === '') {\n            return;\n        }\n        // eslint-disable-next-line\n        const directionsService = new google.maps.DirectionsService()\n        let departTime;\n        let arrivalTime;\n        if( selected ==='depart') {\n            departTime = new Date(dateTime);\n            // eslint-disable-next-line\n            const results = await directionsService.route({\n                origin: startRef.current.value,\n                destination: destinationRef.current.value,\n                // eslint-disable-next-line\n                travelMode: google.maps.TravelMode.TRANSIT,\n                provideRouteAlternatives: true,\n                transitOptions: {\n                departureTime: departTime,\n                },\n            })\n            setDirectionsResponse(results);\n        }else if( selected ==='arrive') {\n            arrivalTime = new Date(dateTime);\n            // eslint-disable-next-line\n            const results = await directionsService.route({\n            origin: startRef.current.value,\n            destination: destinationRef.current.value,\n            // eslint-disable-next-line\n            travelMode: google.maps.TravelMode.TRANSIT,\n            provideRouteAlternatives: true,\n            transitOptions: {\n            arrivalTime: arrivalTime,\n            // routingPreference:\n            },\n        })\n            setDirectionsResponse(results);\n        } else {\n        // eslint-disable-next-line\n        const results = await directionsService.route({\n            origin: startRef.current.value,\n            destination: destinationRef.current.value,\n            // eslint-disable-next-line\n            travelMode: google.maps.TravelMode.TRANSIT,\n            provideRouteAlternatives: true,\n        })\n            setDirectionsResponse(results);\n        }\n    }\n\n    async function clearRoute() {\n        // eslint-disable-next-line\n        const geocoder = new google.maps.Geocoder();\n        if((destinationRef.current.value === '')&&(startRef.current.value === '')){\n           markers.setMap(null);\n           setMarkers({});\n        }\n        else if(startRef.current.value === '') {\n            // eslint-disable-next-line\n            const marker = new google.maps.Marker({ map: map });\n            const placeId = directionsResponse.geocoded_waypoints[1].place_id;\n            geocoder\n            .geocode({ placeId: placeId})\n            .then(({ results }) => {\n                // Set the position of the marker using the place ID and location.\n                // @ts-ignore TODO This should be in @typings/googlemaps.\n                marker.setPlace({\n                  placeId: placeId,\n                  location: results[0].geometry.location,\n                });\n                setMarkers(marker);\n            });\n            setDirectionsResponse(null);\n        } else if(destinationRef.current.value === '') {\n            // eslint-disable-next-line\n            const marker = new google.maps.Marker({ map: map });\n            const placeId = directionsResponse.geocoded_waypoints[0].place_id;\n            geocoder\n            .geocode({ placeId: placeId})\n            .then(({ results }) => {\n                // Set the position of the marker using the place ID and location.\n                // @ts-ignore TODO This should be in @typings/googlemaps.\n                marker.setPlace({\n                  placeId: placeId,\n                  location: results[0].geometry.location,\n                });\n                setMarkers(marker);\n            });\n            setDirectionsResponse(null);\n        } \n        document.getElementById('panel').innerHTML=\"\";\n    }\n\n    return  (<><div className=\"flex-container\">\n        <div className=\"box1\">\n            <h1>Journey Planner</h1>\n            <div className=\"journey-form\">\n                <Autocomplete options={{\n                    bounds: defaultBounds,\n                    componentRestrictions: { country: [\"IE\"] },\n                    fields: [\"place_id\", \"geometry\", \"name\"],\n                    strictBounds: true,\n                }}>\n                    <input type=\"search\" placeholder=\"Start Point\" className=\"box\" ref={startRef} onChange= {clearRoute}></input>\n                </Autocomplete>\n                <Autocomplete options={{\n                    bounds: defaultBounds,\n                    componentRestrictions: { country: [\"IE\"] },\n                    fields: [\"place_id\", \"geometry\", \"name\"],\n                    strictBounds: true,\n                }}>\n                    <input type=\"search\" placeholder=\"Destination\" className=\"box\" ref={destinationRef} onChange={clearRoute}></input>\n                </Autocomplete>\n                <label for=\"time\">Choose a time to start the journey: </label>\n                <select id=\"option\" value={selected} onChange={changeSelected}>\n                    <option value=\"now\">Leave Now</option>\n                    <option value=\"depart\">Depart At</option>\n                    <option value=\"arrive\">Arrive By</option>\n                    <option value=\"lastAvaliable\">Last Avaliable</option>\n                </select>\n                {/* add the html input datetime element or not */}\n                {booleanValue ? <div id=\"time\"><input type=\"datetime-local\" id=\"datetime\" onChange={handleChange} value={dateTime}></input></div> : null}\n                \n                <button type=\"submit\" className=\"btn\" onClick={caculateRoute}>Search</button>\n            </div>\n            <div id=\"panel\"></div>\n        </div>\n        <div className=\"box2\">\n            <div id=\"map\">\n                <GoogleMap\n                    mapContainerStyle={containerStyle}\n                    center={center}\n                    zoom={13}\n                    onLoad={map => setMap(map)}\n                >\n                    {/* Child components, such as markers, info windows, etc. */}\n                    {/* <Marker position={center} /> */}\n                    {directionsResponse && (<DirectionsRenderer directions={directionsResponse} panel={ document.getElementById('panel') } routeIndex={0}/>)}\n                </GoogleMap>\n            </div>\n        </div>\n\n    </div></>);}\nexport default JourneyPlanning;","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/components/layout/MainNavigation.js",[],[],"/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/components/layout/WeatherCard.js",["53"],[],"import ReactWeather, { useOpenWeather } from 'react-open-weather';\n\nconst customStyles = {\n\tfontFamily:  'Helvetica, sans-serif',\n\tgradientStart:  '#0181C2',\n\tgradientMid:  '#04A7F9',\n\tgradientEnd:  '#4BC4F7',\n\tlocationFontColor:  '#FFF',\n\ttodayTempFontColor:  '#FFF',\n\ttodayDateFontColor:  '#B5DEF4',\n\ttodayRangeFontColor:  '#B5DEF4',\n\ttodayDescFontColor:  '#B5DEF4',\n\ttodayInfoFontColor:  '#B5DEF4',\n\ttodayIconColor:  '#FFF',\n\n};\n\nfunction WeatherCard(props) {\n  const { data,isLoading, errorMessage } = useOpenWeather({\n    key: 'f775d12211646f76b3f266a5076c78a9',\n    lat: '53.344',\n    lon: '-6.2672',\n    lang: 'en',\n    unit: 'metric', // values are (metric, standard, imperial)\n  });\n  \n{return (\n    <ReactWeather\n      isLoading={isLoading}\n      errorMessage={errorMessage}\n      data={data}\n      lang=\"en\"\n      locationLabel=\"Dublin\"\n      unitsLabels={{ temperature: 'C', windSpeed: 'Km/h' }}\n      showForecast={props.boolean}\n      theme = {customStyles}\n    />);\n}\n}\nexport default WeatherCard;","/Users/songwendi/Desktop/COMP47360---Dublin-Bus/frontend/src/components/layout/LoginForm.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":1,"column":68,"nodeType":"56","messageId":"57","endLine":1,"endColumn":74},{"ruleId":"58","severity":2,"message":"59","line":68,"column":39,"nodeType":"56","messageId":"60","endLine":68,"endColumn":45,"suppressions":"61"},{"ruleId":"58","severity":2,"message":"59","line":78,"column":29,"nodeType":"56","messageId":"60","endLine":78,"endColumn":35,"suppressions":"62"},{"ruleId":"58","severity":2,"message":"59","line":92,"column":25,"nodeType":"56","messageId":"60","endLine":92,"endColumn":31,"suppressions":"63"},{"ruleId":"58","severity":2,"message":"59","line":106,"column":25,"nodeType":"56","messageId":"60","endLine":106,"endColumn":31,"suppressions":"64"},{"ruleId":"58","severity":2,"message":"59","line":115,"column":30,"nodeType":"56","messageId":"60","endLine":115,"endColumn":36,"suppressions":"65"},{"ruleId":"58","severity":2,"message":"59","line":122,"column":32,"nodeType":"56","messageId":"60","endLine":122,"endColumn":38,"suppressions":"66"},{"ruleId":"58","severity":2,"message":"59","line":138,"column":32,"nodeType":"56","messageId":"60","endLine":138,"endColumn":38,"suppressions":"67"},{"ruleId":"68","severity":1,"message":"69","line":27,"column":1,"nodeType":"70","messageId":"71","endLine":38,"endColumn":2},"no-unused-vars","'Marker' is defined but never used.","Identifier","unusedVar","no-undef","'google' is not defined.","undef",["72"],["73"],["74"],["75"],["76"],["77"],["78"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",{"kind":"79","justification":"80"},{"kind":"79","justification":"80"},{"kind":"79","justification":"80"},{"kind":"79","justification":"80"},{"kind":"79","justification":"80"},{"kind":"79","justification":"80"},{"kind":"79","justification":"80"},"directive",""]